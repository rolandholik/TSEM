What:		/sys/fs/tsem
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The /sys/fs/tsem directory contains files and one
		directory that implement the control plane for the
		Trusted Security Event Modeling (TSEM) LSM.

		The files in this directory, with the exception of the
		aggregate file, when read, reflect the values for the
		modeling domain/namespace that the process reading the
		files is operating in.

What:		/sys/fs/tsem/aggregate
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The aggregate file contains the ASCII base 16
		representation of the 256 bit hardware platform
		aggregate that TSEM is modeling under.  The platform
		aggregate is the extension measurement of the Trusted
		Platform Module PCR registers 0 through 8.

What:		/sys/fs/tsem/forensics
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The forensics file contains the descriptions of
		security events that are inconsistent with the
		security model that the domain/namespace is running
		under.  Forensics events are generated after a
		security model is 'sealed' and the events represent
		security state points that have not already been
		defined in the model.

		The format of lines in this file are identical to the
		output generated by the /sys/fs/tsem/trajectory file
		that is documented below.

What:		/sys/fs/tsem/id
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The id file contains the ASCII base 10 representation
		of the model domain/namespace identifier that the
		reading process is operating in.

		The root domain/namespace has a value of zero, with a
		non-zero value representing a modeling domain
		independent from the root model.

		A domain with a non-zero id value, that is externally
		modeled.  Each externally modeled domain will have a
		file created in the /sys/fs/tsem/ExternalTMA directory
		that is documented at the end of this document.

What:		/sys/fs/tsem/measurement
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The measurement file contains the ASCII base 16
		hexadecimal representation of the 256 bit measurement
		value of the security model that the process is
		operating in.

		The measurement value is the classic linear extension
		measurement of the model.  An updated measurement
		value is created by extending the current measurement
		value with the state coefficient computed for a
		security event.

		This measurement value represents a time dependent
		measurement of a model and is susceptible to
		deviations caused by scheduling differences between
		subsequent invocations of a workload.

What:		/sys/fs/tsem/points
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The points file contains the ASCII base 16
		representation of the 256 bit security state points of
		a security domain/model.  The number of entries in
		this file represent the number of security events that
		are represented by the model.

What:		/sys/fs/tsem/state
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The state file contains the ASCII base 16
		representation of the 256 bit value of the functional
		state of a security domain/model.

		The state value is a time independent representation
		of the measurement of a model/domain, and unlike the
		measurement value, is a time independent
		representation of the security state of a workload.

		This value is designed to be a single value that can
		be attested to represent whether or not a workload has
		deviated from a defined security behavior.

What:		/sys/fs/tsem/trajectory
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The trajectory file contains a description of the
		security events that have occurred in a security
		domain/model.

		Each entry in this file represents a single security
		event and consists of brace {} delimited fields that
		describe the characteristics of a security event.
		Each field has key=value pairs that define
		characteristics of the field.

		Each line in a trajectory, or forensics, file will
		always have the event{} and COE{} fields.  The event
		field describes the characteristics of a security
		event while the COE field describes the Context Of
		Execution that is executing the security event.

		The event{} field consists of the following
		characteristic definitions:

			process=COMM
				Where COMM is the ASCII representation
				of the name of the process executing
				the event.

			filename=PATH
				If the CELL definition for an event
				references a file the filename
				characteristic contains a definition
				of the path to the file.

				In the case where an event does not
				have a file the PATH value is set to a
				value of none.

			type=EVENT_TYPE
				The value field for a type key is the
				name of the security event that is
				being modeled.  The list of value
				EVENT_TYPE names is defined in the
				following source file:

				security/tsem/tsem.c

				If the security event is a generically
				modeled event the EVENT_TYPE will be
				generic_event.  In this case the CELL
				characteristics for the event will be
				described by a generic_event{} field.

			task_id=TASK_ID
				The value of the task_id key will the
				ASCII base 16 representation of the
				model identity of the task that is
				executing the security event.

				The following documentation file:

				Documentation/admin-guide/LSM/TSEM.rst

				Describes how the TASK_ID value is
				generated.

		The COE{} field consists of the following
		characteristic definitions:

			uid=NN
				The ASCII base 10 representation of
				the numeric value of the discretionary
				user id of the process that is
				executing the security event.

			euid=NN
				The ASCII base 10 representation of
				the numeric value of the effective
				discretionary user id of the process
				that is executing the security event.

			euid=NN
				The ASCII base 10 representation of
				the numeric value of the effective
				discretionary user id of the process
				that is executing the security event.

			suid=NN
				The ASCII base 10 representation of
				the numeric value of the saved user id
				of the process that is executing the
				security event.

			gid=NN
				The ASCII base 10 representation of
				the numeric value of the discretionary
				group id of the process that is
				executing the security event.

			egid=NN
				The ASCII base 10 representation of
				the numeric value of the discretionary
				effective group id of the process that
				is executing the security event.

			egid=NN
				The ASCII base 10 representation of
				the numeric value of the discretionary
				effective group id of the process that
				is executing the security event.

			sgid=NN
				The base 10 ASCII representation of
				the numeric value of the saved
				discretionary group id of the process
				that is executing the security event.

			fsuid=NN
				The base 10 ASCII representation of
				the numeric value of the discretionary
				filesystem user id of the process that
				is executing the security event.

			fsgid=NN
				The ASCII base 10 representation of
				the numeric value of the discretionary
				filesystem group id of the process
				that is executing the security event.

			cap=0xNNN
				The ASCII base 16 representation of
				the numeric value of effective
				capabilities of the process that is
				executing the security event.

		If the CELL value for a security event includes the
		definition of a file a file{} event field will be
		included.  The following characteristics will be
		encoded in this field:

			flags=NN
				The ASCII base 10 representation of
				the flags value of the 'struct file'
				structure that is the source of the
				file description.

			uid=NN
				The ASCII base 10 representation of
				the discretionary user id of the file.

			gid=NN
				The base 10 ASCII representation of
				the discretionary group id of the
				file.

			mode=0NNN
				The ASCII base 8 representation of the
				mode bits of the file.

			name_length=NN
				The ASCII base 10 representation of
				the length of the pathname that will
				be encoded in the name= characteristic.

			name=NN
				The ASCII hexadecimal representation
				of the SHA256 checksum of the pathname
				of the file that is pre-pended with
				the little-endian binary value of the
				length of the pathname.

			s_magic=0xNN
				The ASCII base 16 representation of the
				magic number of the filesystem that
				contains the file.

			s_id=NAME
				The ASCII name of the block device for
				the filesystem that contains the file.

			s_UUID=HEX
				The ASCII base 16 representation of
				the hexadecimal value of the UUID of
				the filesystem that contains the file.

			digest=HEX
				The ASCII base 16 representation of
				the SHA256 digest of the file.

		If the event type is the memory mapping of a file the
		mmap_file{} event description will be included with
		the following characteristics:

			type=N
				Where N is an ASCII 0 or 1 to indicate
				whether or not the mapping is file
				backed or anonymous.  A value of 1 is
				used to indicate an anonymous mapping.

			reqprot=NN
				Where N is ASCII base 10
				representation of the protections
				requested for the mapping.

			prot=NN
				Where N is the ASCII base 10
				representation of the protections that
				will be applied to the mapping.

			flags=NN
				Where N is the ASCII base 10
				representation of the flags that will
				be used for the memory mapping operation.

		If the event type is a socket creation event the
		socket_create{} event description will be included
		with the following characteristics:

			family=N
				Where N is the ASCII base 10
				representation of the family of the
				socket that is being created.

			type=N
				Where N is the ASCII base 10
				representation of the type of the
				socket being created.

			protocol=N
				Where N is the ASCII base 10
				representation of the socket protocol.

			kern=N
				Where N is an ASCII 0 or 1 that is
				used to represent whether or not this
				is a kernel base socket.  A value of 1
				indicates a kernel based socket.

		If the event type is a socket creation event the
		socket_create{} event description will be included
		with the following characteristics:

		If the event type is a socket_connect or a socket_bind,
		a socket_connect{} or a socket_bind{} field will be
		included that will be characterized based on an
		encoding of either an IPV4, IPV6 or a generic socket
		description.

			family=N
				Where N is the ASCII base 10
				representation of the family type of
				the socket.

			port=N
				Where N is the base ASCII base 10
				representation of the port number that
				is being used for either an IPV4 or
				IPV6 socket connection or bind.

			addr=N | HEXID
				In the case of an IPV4 socket the
				value for the addr key will be the
				ASCII base 10 representation of the 32
				bit IPV4 address being bound or
				connected to.

				In case case of an IPV6 connection the
				value to the key will be the ASCII
				base 16 representation of the 128 bit
				address being bound connected.

				In the case of any other type of
				socket the addr value will be the
				ASCII base 16 representation of the
				SHA256 checksum over the entire length
				of the address description.

			flow=N
				For an IPV6 socket the value of the
				flow key will be the ASCII base 10
				representation of the flow identifier
				assigned to the socket.

			scope=N
				For an IPV6 socket the value of the
				scope key will be the ASCII base 10
				representation of the scope identifier
				assigned to the socket.

		If the event type is a socket_accept a socket_accept{}
		field will be included characterizes either an IPV4,
		IPV6 or a generic socket description with the
		following event descriptions:

			family=N
				Where N is the ASCII base 10
				representation of the family type of
				the socket.

			type=N
				Where N is the ASCII base 10
				representation of the type of the
				socket being created.

			port=N
				Where N is the base ASCII base 10
				representation of the port number that
				is being used for either an IPV4 or
				IPV6 socket connection or bind.

			addr=N | HEXID
				In the case of an IPV4 socket the
				value for the addr key will be the
				ASCII base 10 representation of the 32
				bit IPV4 address being bound or
				connected to.

				In case case of an IPV6 connection the
				value to the key will be the ASCII
				base 16 representation of the 128 bit
				address being bound connected.

				In the case of any other type of
				socket the addr value will be the
				ASCII base 16 representation of the
				SHA256 checksum over the entire length
				of the address description.

What:		/sys/fs/tsem/ExternalTMA
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The ExternalTMA directory is a container directory
		that hold files that will be used to export the
		security events, and their associated parameters, for
		externally modeled security domains/namespaces.

		The files created in this directory will be named by
		the base 10 ASCII representation of the id value
		assigned to the modeling domain/namespace.  See the
		documentation for the /sys/fs/tsem/id file in this
		documentation for more details on this value.

		This file will is a read-only file that can be polled
		by a userspace trust orchestration implementation to
		process security events that are to be modeled by
		an external Trusted Modeling Agent.

		The type of the exported event is the first keyword of
		the line that is output and have the following
		values and arguments:

		aggregate HEXID:
			Where HEXID is the ASCII base 16
			representation of the 256 bit hardware
			platform aggregate value.

		export pid{NNN} COE{} CELL_DEFINITION
			Where the NNN in the pid field is the ASCII
			base 10 value of the id of the process that is
			executing the security event that will be
			modeled.

			The COE field has the same format as the field
			emitted for a trajectory or forensics event.

			The CELL_DEFINITION are the same field
			definitions that are emitted for a trajectory
			or forensics event.

		log process{name} event{type} action{type}
			The log event is emitted when an untrusted
			task attempts to execute a security event.

			The name value of the COE field is the name of
			the process (comm value) that is executing the
			security event.

			The type value of the event field is the name
			of the security event being executed as
			defined in the tsem_names array in the
			security/tsem/tsem.c file.

			The type value of the action field is the type
			of action the LSM enforced in response to
			encountering the untrusted process.  This
			value will be either LOG or EPERM to represent
			whether or not the trust violation is being
			logged or enforced.

What:		/sys/fs/tsem/control
Date:		February 2023
Contact:	Greg Wettstein <greg@enjellic.com>
Description:
		The control file is the only writable file in the
		filesystem and is used by the trust orchestrators to
		configure and control the behavior of the TSEM
		implementation.

		The following keyword and arguments are recognized:

		internal:
			The internal keyword causes an internally
			modeled domain to be created for the calling
			process.

		external:
			The external keyword causes an externally
			modeled domain to be created for the calling
			process.

		enforce:
			The enforce keyword causes the modeling
			domain/namespace of the process to enter
			enforcing mode.  In this mode a value of
			-EPERM will be returned for a security event
			that does not map into the current set of
			allowed state points for the security model
			being implemented for the domain/namespace.

		seal:
			The seal keyword causes the security model
			being implemented for the model to be placed
			in sealed state.  In this state the current
			set of security event points is considered to
			be the only set of valid points for the
			domain/model.  Any subsequent events that map
			to a point not in the current model will be
			considered a violation of the model.

		trusted PID:
			The trusted keyword is used by a trust
			orchestrator to indicate that the process
			identified by the PID argument should be
			allowed to run in trusted status.

		untrusted PID:
			The untrusted keyword is used by a trust
			orchestrator to indicate that the process
			identified by the PID argument should be
			allowed to run but designated as an untrusted
			process.

		state HEXID:
			The state keyword is used to indicate that the
			security state point identified by the ASCII
			base 16 encoded value should be loaded into
			the current security model as a valid security
			event state.

		pseudonym HEXID
			The pseudonym keyword is used to indicate that
			the pathname, identified by the 256 bit ASCII
			base 16 encoded value HEXID, should be
			designated to return a constant digest value
			for the contents of the file.

			The HEXID value is computed with the following
			function:

			HEXID = SHA256(PATHNAME_LENGTH || PATHNAME)

		base HEXID
			The base keyword is used to indicate that the
			256 bit ASCII base 16 encoded value HEXID
			should be registered as the value used to
			generate model specific security event points.

			A model specific base value is designed to be
			used as a 'freshness' nonce, similar to an
			attestation nonce, to prove that a model state
			value or measurement is current and not being
			replayed.
